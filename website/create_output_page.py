#!/usr/bin/env python

import glob
import sys
import os

def main():
    fn = sys.argv[1]
    f = open(fn, "r")
    ln = f.readlines()
    f.close()

    out = ""
    for l in ln:
        if l.startswith("INSERT "):
            ff = l.replace("INSERT ", "").strip()
            raw_rst = "/".join(fn.split("/")[:-1]).strip() + "/all_examples/" + ff.replace(".py", ".rst")
            if os.path.exists(raw_rst) == False:
                out += "\n\n"
            else:
                out += "\n\n\n" + simplify_one_rst(raw_rst) + "\n\n\n"
        else:
            out += l

    print(out)
    
def simplify_one_rst(fn):
    f = open(fn, "r")
    ln = f.readlines()
    f.close()

    for i, l in enumerate(ln):
        if l.strip().startswith(".. code-block:: Python"):
            start = i
    code_txt = ""
    for i, l in enumerate(ln[start:]):
        if i > 0 and l.strip().startswith(".."):
            break
        code_txt += l.replace(r"comp.info(print_to_screen = False, show_code = True)", r"comp.info(show_code = True)").replace(r"db.info(print_to_screen = False)", r"db.info()")
            
    for i, l in enumerate(ln):
        if l.strip().startswith(".. rst-class:: sphx-glr-script-out"):
            start = i + 3
    out_txt = ""
    for i, l in enumerate(ln[start:]):
        if l.startswith(r"|"):
            break
#        if l.startswith("    "):
#            out_txt += l[4:]
#        else:
#            out_txt += l
        out_txt += l
        
    return "\n\n\n\n" + code_txt + "\n\n" + "Below is the output generated by the python code above." "\n\n" + r".. code-block:: none" + "\n\n" + out_txt + "\n\n\n\n"

main()
