Person A  ---> whoever owns the repository on github
Person B  ---> anybody else who wants to contribute to the repository

*************************

We will use gitflow workflow as described here

https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow

(Note: Atlassian promotes use of BitBucket, but we will use github.)

*************************

Here are steps that A did once and for all at the start:

1. Created github repository on github website. Then did this:

cd wfbase
git init
git add --all
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:sinisacoh/wfbase.git

2. Add ssh key:

Go to settings on github.
Click on "Deploy keys" on the left side.
Click "Add deploy key" in top right corner.
Copy paste contents of .ssh/id_rsa.pub into "Key"
Give some name.
Select "Allow write access".
Add.

Now you can run the following command:

git push -u origin main

3. Created develop branch and pushed it to github:

  git branch develop
  git push -u origin develop

Note that "origin" in git language means github repository.

4. Also made main and develop branch protected.  In settings
under "branches" select "Require a pull request before merging"
and keep selected "Require approvals".

5. In the settings change the default branch to "develop".

*************************

1. If B wants to add a feature to wfbase they should first get
the repository:

  git clone git@github.com:sinisacoh/wfbase.git

or, if it already in place, download updates

  git pull --all          'git pull' = 'git fetch' + 'git merge'
                          Option '--all' updates all branches
  git branch -a           List of branches
  git status              Info about current status

2. Then B should change to the develop branch:

  git checkout develop

3. Next B should make a feature branch for the addition they wants
to do to the code

  git checkout -b feature_DESCRIPTOR

This will initially be a copy of 'develop'.

4. Now B can do whatever work they want to do on this branch.

  git add FILENAME
  ...
  git add -u             Good for safety; adds all tracked files
  git status             Check it looks OK

To submit changes to the feature branch remotely:

  git commit -m "type message here"
  git push -u origin feature_DESCRIPTOR

This last line has to be done once per local repository.  Next
time you can simply do

  git push origin

Note that any time you change any file, you need to "git add" it
again before committing and pushing.

5. If A did some work on the same branch, and then did
add/commit/push_origin B can add those changes by doing

  git pull -u origin feature_DESCRIPTOR

6. When B is done working on the feature branch, and it has
been pushed to origin, they should create a pull request to have
it merged into the 'develop' branch.  On the GitHub website.

  Click 'New pull request'

  In pulldown menus: Set
    base:      develop  <<--- ESSENTIAL PART: use develop here!
    compare:   feature_DESCRIPTOR
  
  Write comments
  
  Click 'Create pull request'

(See https://help.github.com/articles/creating-a-pull-request .)

As long as there are no conflicts, A does the merge into
'develop' on the Github website.
If there are conflicts then they need to be resolved in the 
terminal.

If A or B don't like something in the pull request, say
they discuss something during pull request via website and they 
decide that further changes are needed to the branch, then they 
can simply git "add,commit,push" more changes to the origin via
terminal.  These additions should get updated in the github's
pull request on the website.

7. The feature_DESCRIPTOR branch can now be deleted:

  git checkout develop
  git branch -d feature_DESCRIPTOR                  ! locally
  git push origin --delete feature_DESCRIPTOR       ! remotely

8. When we have decided to issue a new release of the code we should
follow steps described in NEWVERSION
